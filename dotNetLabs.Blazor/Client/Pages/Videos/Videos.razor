@page "/videos"
@inject ILanguageContainerService language
@inject NavigationManager navigationManager
@inject HttpClient httpClient

<h3>@language["Videos:Title"]</h3>


@if (isBusy)
{
    <BFUSpinner Size="SpinnerSize.Large" />
}

<div class="ms-Grid" dir="ltr">

    <div class="ms-Grid-row">
        @if (videos != null)
        {
            @foreach (var video in videos)
            {
                <div class="ms-Grid-col ms-sm12 ms-md6 ms-lg3">
                    <VideoTicket Video="@video" OnTicketClicked="OnVideoClicked" />
                </div>
            }

        }
    </div>

    <div class="ms-Grid-row">

        <div class="ms-Grid-col ms-sm4 ms-smPush4">

            @if (isMoreAvailable && !isBusy)
            {
                <BFUButtonBase Text="@language["Videos:ShowMore"]" @onclick="LoadMoreVideosAsync" />
            }else if(!isBusy)
            {
                <p>@language["Videos:AllLoaded"]</p>
            }

        </div>

    </div>

</div>




@code {
    private bool isBusy = false;
    private List<VideoDetail> videos = null;
    private int currentPageNumber = 1;
    private int totalPageCount = 1;
    private bool isMoreAvailable = false;

    protected override async Task OnInitializedAsync()
    {
        videos = (await FetchVideosAsync()).ToList();
    }

    private async Task<IEnumerable<VideoDetail>> FetchVideosAsync()
    {
        isBusy = true;

        try
        {
            var response = await httpClient.GetFromJsonAsync<CollectionResponse<VideoDetail>>($"/api/videos/getall?pageNumber={currentPageNumber}&pageSize=12");
            if (response.IsSuccess)
            {

                currentPageNumber = response.PageNumber.Value;
                totalPageCount = response.PageCount.Value;

                if(currentPageNumber+1 <= totalPageCount) { isMoreAvailable = true; } else { isMoreAvailable = false; }
                isBusy = false;
                return response.Records;

            }
            else
            {
                //TODO: Show an error message
                isBusy = false;
                return null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);

        }
        isBusy = false;
        return null;

    }

    private async Task LoadMoreVideosAsync()
    {
        currentPageNumber++;

        var result = await FetchVideosAsync();
        if(result != null)
        {
            videos.AddRange(result);
        }

    }


    private void OnVideoClicked(VideoDetail video)
    {
        navigationManager.NavigateTo($"/videos/details/{video.Id}");
    }

}
