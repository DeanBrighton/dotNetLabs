@page "/auth/login"

@inject HttpClient httpClient
@inject Blazored.LocalStorage.ILocalStorageService storageService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navigationManager
@inject ILanguageContainerService Language


<h3>@Language["Login:Welcome"] dotNet Labs</h3>
<p>@Language["Login:Subtitle"]</p>

<EditForm Model="model" OnValidSubmit="@LoginUserAsync">
    <div class="textFieldDiv">
        <BFUTextField Label="Email" @bind-Value="model.Email" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="Password" InputType="InputType.Password" @bind-Value="model.Password" />
    </div>
    <BFUButtonBase Text="Login" Disabled="isBusy" />

    @if (isBusy)
    {
        <BFUSpinner Size=@SpinnerSize.Large></BFUSpinner>
    }
</EditForm>

@if (!string.IsNullOrWhiteSpace(message))
{
    <BFUMessageBar MessageBarType="MessageBarType.Error" IsMultiline="false">
        @message
    </BFUMessageBar>
}

@code {

    private bool isBusy = false;
    private string message = string.Empty;
    private LoginRequest model = new LoginRequest();

    private async Task LoginUserAsync()
    {
        isBusy = true;
        try
        {
            var response = await httpClient.PostAsJsonAsync<LoginRequest>("api/authentication/login", model);
            var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
            if (response.IsSuccessStatusCode)
            {
                await storageService.SetItemAsync<string>("access_token", result.AccessToken);

                await authStateProvider.GetAuthenticationStateAsync();

                // Redirect the user to the home page
                Console.WriteLine("Log in successfully!");
                navigationManager.NavigateTo("/");
            }
            else
            {
                message = result.Message;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            message = ex.Message;
        }
        isBusy = false;
    }

    protected async override Task OnInitializedAsync()
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
            navigationManager.NavigateTo("/");
    }

    protected override void OnInitialized()
    {
        Language.InitLocalizedComponent(this);
        base.OnInitialized();
    }
}
