@inject NavigationManager navigationManager
@inject HttpClient httpClient
@inject ILanguageContainerService language


<div class="items-collection">
    @if (playlists != null)
    {
        foreach (var item in playlists)
        {
            <div class="item ms-depth-8 @(selectedPlaylist == item? "selected":"")" @onclick="async () => await SelectPlaylistAsync(item)">
                <h3>@item.Name</h3>
                <p>@item.Description</p>
            </div>
        }


    }

    @if (isMorePlaylistsAvailable)
    {
        <BFUButtonBase Text="@language["Playlists:ShowMore"]" @onclick="LoadMorePlaylistsAsync" />
    }
    else if (!isBusy)
    {
        <p>@language["Playlists:AllLoaded"]</p>
    }

    @if (isBusy)
    {
        <BFUSpinner Size="SpinnerSize.Large"/>
    }
</div>

@code {

    [Parameter]
    public EventCallback<PlaylistDetail> OnSelectPlaylist { get; set; }

    private bool isBusy = false;
    private List<PlaylistDetail> playlists = null;
    private int currentPageNumber = 1;
    private int totalPageCount = 1;
    private bool isMorePlaylistsAvailable = false;
    private PlaylistDetail selectedPlaylist = null;

    protected override async Task OnInitializedAsync()
    {
        playlists = (await FetchPlaylistsAsync()).ToList();
    }

    private async Task<IEnumerable<PlaylistDetail>> FetchPlaylistsAsync()
    {
        isBusy = true;

        try
        {
            var response = await httpClient.GetFromJsonAsync<CollectionResponse<PlaylistDetail>>($"/api/playlists/getall?pageNumber={currentPageNumber}&pageSize=5");
            if (response.IsSuccess)
            {

                currentPageNumber = response.PageNumber.Value;
                totalPageCount = response.PageCount.Value;

                if (currentPageNumber + 1 <= totalPageCount) { isMorePlaylistsAvailable = true; } else { isMorePlaylistsAvailable = false; }
                isBusy = false;
                return response.Records;

            }
            else
            {
                //TODO: Show an error message
                isBusy = false;
                return null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);

        }
        isBusy = false;
        return null;

    }

    private async Task LoadMorePlaylistsAsync()
    {
        currentPageNumber++;

        var result = await FetchPlaylistsAsync();
        if (result != null)
        {
            playlists.AddRange(result);
        }

    }

    private async Task SelectPlaylistAsync(PlaylistDetail playlist)
    {
        selectedPlaylist = playlist;
        await OnSelectPlaylist.InvokeAsync(selectedPlaylist);
    }



}
